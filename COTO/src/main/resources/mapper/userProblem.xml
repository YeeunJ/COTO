<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="userProblem">
	<select id="readUserProblemList" resultType="com.walab.coding.model.UserProblemDTO" parameterType="hashmap">
		select subquery.id, subquery.problemID, subquery.difficulty as difficulty, subquery.memo as memo, subquery.regdate as regdate,
	   		   p.name as problem, p.link as link, p.siteID,
	   		   c.siteName as site, c.siteUrl as siteUrl 
		from (select up.id as id, up.problemID as problemID,
       		  up.difficulty as difficulty, up.memo as memo, up.regdate as regdate 
	   		  from YeeunJ.userProblem as up where up.userID=#{userID}) as subquery 
		join YeeunJ.problem as p on subquery.problemID=p.id 
		join YeeunJ.codingSite as c on p.siteID=c.id ;
	</select>
	
	<select id="searchUserProblemByContent" resultType="com.walab.coding.model.UserProblemDTO" parameterType="hashmap">
		select up.id, p.name as problem, p.link as link, c.siteName as site, c.siteUrl as siteUrl, up.difficulty as difficulty, up.memo as memo, up.regdate as regdate from userProblem as up 
		join problem as p on up.problemID=p.id 
		join codingSite as c on p.siteID=c.id 
		where userID=#{userID} and (p.name like #{content1} or up.memo like #{content2} or c.siteName like #{content3} or up.difficulty like #{content4})
	</select>
	
	<select id="searchProblemOrderByCount" resultType="com.walab.coding.model.UserProblemDTO">
		select cs.siteName as site, problem.name as problem 
		from (SELECT problemID, count(*) FROM userProblem group by problemID order by count(*) desc limit 4) as pID
		join problem on pID.problemID=problem.id
		join codingSite as cs on problem.siteID = cs.id;
	</select>
	
	<delete id="deleteUserProblem" parameterType="hashmap">
		delete from userProblem where id = #{problemID}
	</delete>
	
	<delete id="deleteUserProblemByProblemID" parameterType="hashmap">
		delete from userProblem where problemID = #{problemID}
	</delete>
	
	<update id="updateUserProblem" parameterType="hashmap">
		update userProblem set difficulty='${difficulty}', memo='${memo}' where id = #{id}
	</update>
	
	<select id="readSovledUserProblem" resultType="int" parameterType="hashmap">
		SELECT count(A.userID) as solved 
		FROM userProblem as A, (SELECT startDate,endDate FROM goal WHERE userID=#{userID} order by startDate DESC limit 1) subquery 
		WHERE <![CDATA[A.regDate >= subquery.startDate and A.regDate <= subquery.endDate]]> and A.userID = #{userID}
	</select>
	
	<select id = "readTotalRank" resultType="com.walab.coding.model.RankDTO">
		SELECT (SELECT nickName FROM user WHERE A.userID = id) AS nickName, count(userID) AS cnt FROM `userProblem` AS A GROUP BY userID ORDER BY count(userID) DESC LIMIT 0,4	
 	</select>
 
 	<select id = "readTodayRank" resultType="com.walab.coding.model.RankDTO">
 		SELECT (SELECT id FROM user WHERE A.userID = id) AS id, (SELECT nickName FROM user WHERE A.userID = id) AS nickName, count(userID) AS cnt 
		FROM userProblem
		AS A 
		WHERE DATE_FORMAT(regdate, "%Y-%m-%d") = CURDATE()
		GROUP BY userID 
		ORDER BY count(userID) DESC LIMIT 0,4
 	</select>
 	
 	<insert id="createUserProblem" parameterType="com.walab.coding.model.UserProblemDTO">
 		INSERT INTO userProblem (userID, problemID) VALUES (#{userID}, #{problemID})
<!-- 		INSERT INTO userProblem  (userID, siteID, problem, link, difficulty, memo) VALUES (#{userID}, #{siteID}, #{problem}, #{link}, #{difficulty}, #{memo})-->	
	</insert>
	
	<select id="countUserProblemEachDay" resultType="com.walab.coding.model.UserProblemDTO" parameterType="hashmap">
		(SELECT count(A.userID) as countSolvedP, date_format(A.regdate,'%Y-%m-%d') as regDate From YeeunJ.userProblem as A, 
		(SELECT startdate, enddate FROM YeeunJ.goal WHERE userID=#{userID} order by startdate Desc limit 1) as B 
		WHERE A.userID = #{userID} and 
		<![CDATA[date_format(A.regdate,'%Y-%m-%d') >= B.startdate and date_format(A.regdate,'%Y-%m-%d') <= B.enddate]]>
		group by date_format(A.regdate,'%Y-%m-%d')
		ORDER BY date_format(A.regdate,'%Y-%m-%d') DESC
		LIMIT 20)
		ORDER BY regDate;
	</select>
	
	<select id="readProblemActivities" resultType="com.walab.coding.model.UserProblemDTO" parameterType="hashmap">
		select subquery.id, subquery.problemID, subquery.difficulty as difficulty, subquery.memo as memo, subquery.regdate as regdate, 
	   		   p.name as problem, p.link as link,
	   		   c.siteName as site, c.siteUrl as siteUrl
		from (select up.id as id, up.problemID as problemID, up.difficulty as difficulty, up.memo as memo, up.regdate as regdate 
			  from YeeunJ.userProblem as up
			  join YeeunJ.goal as g on up.userID=g.userID
			  where up.userID=#{userID} and g.id=#{goalID} and
			  <![CDATA[date_format(up.regdate,'%Y-%m-%d') >= g.startdate and date_format(up.regdate,'%Y-%m-%d') <= g.enddate]]>) as subquery 
		join YeeunJ.problem as p on subquery.problemID=p.id
		join YeeunJ.codingSite as c on p.siteID=c.id;
	</select>
	
	<resultMap type="HashMap" id="avgForaWeek">
		<id column="date" property="date"/>
		<id column="average" property="average"/>
	</resultMap>
	
	<select id = "avgForaWeek" resultMap="avgForaWeek">
		SELECT date, AVG(SP) AS average
		FROM(SELECT id,userID, COUNT(userID) AS SP,DATE_FORMAT(regdate, '%Y/%m/%d') as date 
			FROM userProblem 
			WHERE regdate BETWEEN DATE_ADD(NOW(),INTERVAL -1 WEEK ) AND NOW()
			GROUP BY date, userID) countByDate
		GROUP BY date
 	</select>
 	
	<select id="readProblemByPage" resultType="com.walab.coding.model.UserProblemDTO" parameterType="hashmap">
		select subquery.id, subquery.problemID, subquery.difficulty as difficulty, subquery.memo as memo, subquery.regdate as regdate,
	   		   p.name as problem, p.link as link, p.siteID,
	   		   c.siteName as site, c.siteUrl as siteUrl 
		from (select up.id as id, up.problemID as problemID,
	      		  up.difficulty as difficulty, up.memo as memo, up.regdate as regdate 
	   		  from YeeunJ.userProblem as up where up.userID=#{userID}) as subquery 
		join YeeunJ.problem as p on subquery.problemID=p.id 
		join YeeunJ.codingSite as c on p.siteID=c.id
		ORDER BY id LIMIT #{s_point}, #{list}
	</select>
	<select id="readProblemCnt" resultType="int" parameterType="hashmap">
		select COUNT(*) 
		from (select up.id as id, up.problemID as problemID,
	      		  up.difficulty as difficulty, up.memo as memo, up.regdate as regdate 
	   		  from YeeunJ.userProblem as up where up.userID=#{userID}) as subquery 
		join YeeunJ.problem as p on subquery.problemID=p.id 
		join YeeunJ.codingSite as c on p.siteID=c.id
	</select>
	<select id="readOtherUserPage" resultType="com.walab.coding.model.UserProblemDTO" parameterType="hashmap">
		SELECT count(A.userID) as solved, goal, goalNum
		FROM userProblem as A, (SELECT startDate,endDate,goal,goalNum FROM goal WHERE userID=#{userID} order by startDate DESC limit 1) subquery 
		WHERE <![CDATA[A.regDate >= subquery.startDate and A.regDate <= subquery.endDate]]> and A.userID = #{userID}
	</select>
	<select id="countOtherUserProblem" resultType="int" parameterType="hashmap">
		SELECT count(userID) as solved FROM YeeunJ.userProblem where userID=#{userID};
	</select>
</mapper>